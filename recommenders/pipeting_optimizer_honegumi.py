                    
# Generated by Honegumi (https://arxiv.org/abs/2502.06815)
# %pip install ax-platform==0.4.3
import numpy as np
from ax.service.ax_client import AxClient, ObjectiveProperties


from ax.modelbridge.factory import Models
from ax.modelbridge.generation_strategy import GenerationStep, GenerationStrategy


from ax.modelbridge.registry import Specified_Task_ST_MTGP_trans
from ax.core.observation import ObservationFeatures

obj1_name = "deviation"
obj2_name = "variability"
obj3_name = "time"


def branin_moo_mt(x1, x2, task):
    # First objective: variation of Branin function
    y1 = float(
        (x2 - 5.1 / (4 * np.pi**2) * x1**2 + 5.0 / np.pi * x1 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x1)
        + 10
    )

    # Add task-specific penalty
    task_penalty_1 = {"A": 1.0, "B": 1.1 + x1 + 2 * x2}
    y1 += task_penalty_1[task]

    # Second objective: same function with x1 and x2 swapped
    y2 = float(
        (x1 - 5.1 / (4 * np.pi**2) * x2**2 + 5.0 / np.pi * x2 - 6.0) ** 2
        + 10 * (1 - 1.0 / (8 * np.pi)) * np.cos(x2)
        + 10
    )

    task_penalty_2 = {"A": 0.8, "B": 0.9 + 2 * x1 + x2}
    y2 += task_penalty_2[task]

    # Third objective: time â€” mock example using simple formula
    # You can replace this with actual timing or a cost model
    y3 = float(abs(x1) + abs(x2)) * (1.2 if task == "B" else 1.0)

    return {
        "deviation": y1,
        "variability": y2,
        "time": y3,
    }



gs = GenerationStrategy(
    steps=[
        GenerationStep(
            model=Models.SOBOL,
            num_trials=4,  # how many sobol trials to perform (rule of thumb: 2 * number of params)
            min_trials_observed=3,
            max_parallelism=5,
            model_kwargs={"seed": 999, "transforms": Specified_Task_ST_MTGP_trans},
            model_gen_kwargs={"deduplicate": True},
        ),
        GenerationStep(
            model=Models.BOTORCH_MODULAR,
            num_trials=-1,
            max_parallelism=3,
            model_kwargs={"transforms": Specified_Task_ST_MTGP_trans},
        ),
    ]
)

ax_client = AxClient(generation_strategy=gs)

ax_client.create_experiment(
parameters=[
    {"name": "aspirate_speed", "type": "range", "bounds": [5, 15]},
    {"name": "wait_time", "type": "range", "bounds": [0.0, 1.0]},
    {"name": "retract_speed", "type": "range", "bounds": [1, 10]},
    {"name": "pre_asp_air_vol", "type": "range", "bounds": [0.0, 0.05]},
    {"name": "post_asp_air_vol", "type": "range", "bounds": [0.0, 0.05]},
    {"name": "blowout_vol", "type": "range", "bounds": [0.0, 0.01]},
    {"name": "volume", "type": "fixed", "value": 1.0},  # set this to different values in batches
]
    objectives={
        obj1_name: ObjectiveProperties(minimize=True, threshold=20),
        obj2_name: ObjectiveProperties(minimize=True, threshold=20),
        obj3_name: ObjectiveProperties(minimize=True, threshold=200),
    },
)


for i in range(19):

    parameterization, trial_index = ax_client.get_next_trial(
        fixed_features=ObservationFeatures({"task": "A" if i % 2 == 0 else "B"})
    )

    # extract parameters
    x1 = parameterization["x1"]
    x2 = parameterization["x2"]

    task = parameterization["task"]

    results = branin_moo_mt(x1, x2, task)
    ax_client.complete_trial(trial_index=trial_index, raw_data=results)

                